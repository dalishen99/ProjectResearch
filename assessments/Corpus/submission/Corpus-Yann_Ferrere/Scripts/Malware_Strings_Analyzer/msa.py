from lib.core import Core
import sys, getopt

def usage():
    """
        Display the usage message of msa.py
    """
    print "$> python msa.py [-p/--path=](PATH_OF_MALWARE_BIN) " \
          "[-v/--vt](VIRUS_TOTAL_API_KEY) [-h/--help]"

def exit_error():
    """
        Call the usage() function and exit msa.py with an error return
        value.
    """
    usage()
    sys.exit(2)

def getopts(argv):
    """
        Parse and extract set options.

        :param argv: List of parameters set by the user.
        :type argv: List
        :return: All valid parameters entered by the user or exit in case of
        unknown parameter.
        :rtype: List
    """
    try:
        opts, args = getopt.getopt(argv, "hp:v:", ["help", "path=", "vt="])
    except getopt.GetoptError:
        exit_error()
    return opts

def start(argv):
    """
        Analyze users options and run the malware string analyzer.

        :param argv: Users options.
        :type: List
        :returns: True if msa success, False otherwise.
        :rtype: Boolean
    """
    opts = getopts(argv)

    if opts == []:
        exit_error()

    selected_opts = {"path" : None, "vt": None}

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            exit_error()
        elif opt in ("-p", "--path"):
            selected_opts["path"] = arg
        elif opt in ("-v", "--vt"):
            selected_opts["vt"] = arg

    if selected_opts["path"] is None:
        exit_error()

    core = Core(selected_opts["path"], selected_opts["vt"])
    if core.load_strings():
        core.run()
    else:
        exit_error()


if __name__ == '__main__':
    start(sys.argv[1:])
