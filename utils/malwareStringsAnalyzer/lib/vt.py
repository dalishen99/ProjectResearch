import json, urllib, urllib2, hashlib, sys

class Vt(object):
    """
        The Vt class is used in order to perform all request to the
        Virus Total API.
    """
    def __init__(self, api_key, malware_path):
        """
            Initialize api_key and malware_path attributs of the class.

            :param api_key: The user's Virus Total API key.
            :param malware_path: The absolute path of the malware binary to
                                 analyze.
            :type api_key: string
            :type malware_path: string
        """
        self.api_key = api_key
        self.malware_path = malware_path

    def __send_req(self, url, parameters):
        """
            Private method that perform a HTTP request to a specific url
            with parameters.

            :param url: Contains targeted url.
            :param parameters: Contains a list of parameters to be sent.
            :type url: string
            :type parameters: dict
            :return: Response of the HTTP request formated in json.
            :rtype: dict
        """
        try:
            response = urllib.urlopen('%s?%s' % \
                        (url, urllib.urlencode(parameters))).read()
            json_rslt = json.loads(response)
        except:
            print "[Error] fail to get data from VirusTotal API."
            return None
        return json_rslt

    def __malware_md5(self):
        """
            Private method that perform the md5 algorithm on the malware binary
            accessible by using the absolute path on the malware_path attribut.

            :return: MD5 hash of the analyzed malware.
            :rtype: string
        """
        hash_md5 = hashlib.md5()
        with open(self.malware_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def __print_ip_rslt(self, json, key, msg):
        """
            Private method that display a green "yes" or a red "no" depending of
            the results sent by Virus Total.

            :param json: Returned json from Virus Total API.
            :param key: Json field to analyze.
            :param msg: Description of the Json field currently analyzed.

        """
        print msg ,
        if key not in json or len(json[key]) == 0:
            print "\033[1;31mno\033[1;m"
            return False
        print "\033[1;32myes\033[1;m"

        return True

    def isActivate(self):
        """
            Check if the api_key has been entered by the user and consequently
            if the Virus Total analysis has to be executed.

            :return: If the Virus Total option is activated or not.
            :rtype: Boolean
        """
        if self.api_key != None:
            return True
        return False

    def file_analysis(self):
        """
            Perform a malware analysis of the selected malaware binary by using
            Virus Total API.

            :return: Notify the success or the failure of this analysis.
            :rtype: Boolean
        """
        if self.isActivate() == False:
            return False
        url = "https://www.virustotal.com/vtapi/v2/file/report"
        parameters = {"resource": self.__malware_md5(),
                      "apikey": self.api_key}
        json = self.__send_req(url, parameters)
        if json == None or json["response_code"] == -1:
            return False
        if json["response_code"] == 0:
            print "\t/!\ File not in VirusTotal dataset." \
                  " Please report it to VirusTotal."
            return False
        print "-> md5:\t\t\t{}".format(json["md5"])
        print "-> sha1:\t\t{}".format(json["sha1"])
        print "-> sha256:\t\t{}".format(json["sha256"])
        print "-> Antivirus detection:\t{}/{}".format(json["positives"], \
              json["total"])
        print "-> More information on:\t{}".format(json["permalink"])
        return True

    def url_analysis(self, url_to_analyze):
        """
            Perform an url analysis of a specified url by using
            Virus Total API.

            :param url_to_analyze: Url to analyze.
            :type url_to_analyze: string
            :return: Notify the success or the failure of this analysis.
            :rtype: Boolean
        """
        print "-> {}:".format(url_to_analyze)
        url = "https://www.virustotal.com/vtapi/v2/url/report"
        parameters = {"resource": url_to_analyze, "apikey": self.api_key}
        json = self.__send_req(url, parameters)
        if json == None or json["response_code"] == -1:
            return False
        if json == None or json["response_code"] == 0:
            print "\t/!\ URL not in VirusTotal dataset."
            return False
        print "\t- Antivirus detection:\t{}/{}".format(json["positives"], \
              json["total"])
        print "\t- More information on:\t{}".format(json["permalink"])
        return True

    def ip_analysis(self, ip):
        """
            Perform an ip analysis of a specified ip by using
            Virus Total API.

            :param ip: IP to analyze.
            :type ip: string
            :return: Notify the success or the failure of this analysis.
            :rtype: Boolean
        """
        print "-> {}:".format(ip)
        url = 'https://www.virustotal.com/vtapi/v2/ip-address/report'
        parameters = {'ip': ip, 'apikey': self.api_key}
        json = self.__send_req(url, parameters)

        if json == None or json["response_code"] == -1:
            return False
        if json["response_code"] == 0:
            print "\t/!\ IP address not in VirusTotal dataset." \
                  " Please report it to VirusTotal."
            return False

        try:
            print "\t- country: " + json["country"]
            print "\t- owner: " + json["as_owner"]
        except:
            pass

        self.__print_ip_rslt(json, "detected_urls",
                            "\t- Are malicious URLs hosted in this IP: ")
        self.__print_ip_rslt(json, "detected_downloaded_samples",
                            "\t- Are known malware downloaded from this IP: ")
        self.__print_ip_rslt(json, "detected_communicating_samples",
                            "\t- Some of those malware have been execute in " \
                             "VirusTotal sandboxed env: ")
        self.__print_ip_rslt(json, "detected_referrer_samples",
                            "\t- This IP has been found in another malware " \
                            "strings: ")

        print "\t- More information on: " \
              "https://www.virustotal.com/ip-address/{}/information/" \
                .format(ip)
        return True
