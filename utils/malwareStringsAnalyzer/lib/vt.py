import json
import urllib
import urllib2
import hashlib
import sys
from lib.extern.postfile import *

class Vt(object):
    def __init__(self, api_key, malware_path):
        self.api_key = api_key
        self.malware_path = malware_path

    def isActivate(self):
        if self.api_key != None:
            return True
        return False

    def send_req(self, url, parameters):
        try:
            response = urllib.urlopen('%s?%s' % \
                        (url, urllib.urlencode(parameters))).read()
            json_rslt = json.loads(response)
        except:
            print "[Error] fail to get data from VirusTotal API."
            return None
        return json_rslt

    def send_report_req(self, url, parameters):
        try:
            data = urllib.urlencode(parameters)
            req = urllib2.Request(url, data)
            response = urllib2.urlopen(req)
            json_rslt = json.loads(response.read())
        except:
            print "[Error] fail to get data from VirusTotal API."
            return None
        return json_rslt

    def malware_md5(self):
        hash_md5 = hashlib.md5()
        with open(self.malware_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def report_file(self):
        host = "www.virustotal.com"
        selector = "https://www.virustotal.com/vtapi/v2/file/scan"
        fields = [("apikey", self.api_key)]
        file_to_send = open(self.malware_path, "rb").read()
        files = [("file", "test.txt", file_to_send)]
        json = post_multipart(host, selector, fields, files)
        print json

    def file_analysis(self):
        if self.isActivate() == False:
            return False
        url = "https://www.virustotal.com/vtapi/v2/file/report"
        parameters = {"resource": self.malware_md5(),
                      "apikey": self.api_key}
        json = self.send_req(url, parameters)
        if json == None or json["response_code"] == -1:
            return False
        if json["response_code"] == 0:
            print "\t/!\ File not in VirusTotal dataset. Please report it to VirusTotal."
            # self.report_file()
            return False
        print "-> md5:\t\t\t{}".format(json["md5"])
        print "-> sha1:\t\t{}".format(json["sha1"])
        print "-> sha256:\t\t{}".format(json["sha256"])
        print "-> Antivirus detection:\t{}/{}".format(json["positives"], json["total"])
        print "-> More information on:\t{}".format(json["permalink"])
        return True

    def report_url(self, url_to_report):
        url = "https://www.virustotal.com/vtapi/v2/url/scan"
        parameters = {"url": url_to_report, "apikey": self.api_key}
        json = self.send_report_req(url, parameters)
        if json == None or json["response_code"] != 1:
            print "\t[Error] Fail to report this url to VirusTotal."
            return False
        print "This URL has been reported to VirusTotal and is now queued to be scanned."
        return True


    def report_ip(self, url_to_report):
        url = "https://www.virustotal.com/vtapi/v2/url/scan"
        parameters = {"url": url_to_report, "apikey": self.api_key}
        json = self.send_report_req(url, parameters)
        if json == None or json["response_code"] != 1:
            print "\t[Error] Fail to report this url to VirusTotal."
            return False
        print "This URL has been reported to VirusTotal and is now queued to be scanned."
        return True

    def url_analysis(self, url_to_analyze):
        print "-> {}:".format(url_to_analyze)
        url = "https://www.virustotal.com/vtapi/v2/url/report"
        parameters = {"resource": url_to_analyze, "apikey": self.api_key}
        json = self.send_req(url, parameters)
        if json == None or json["response_code"] == -1:
            return False
        if json == None or json["response_code"] == 0:
            print "\t/!\ URL not in VirusTotal dataset."
            #resp = raw_input("\t/!\ URL not in VirusTotal dataset. Do you want to add it ? (y/n) ")
            # if resp == "y":
            #     self.report_url(url_to_analyze)
            return False
        print "\t- Antivirus detection:\t{}/{}".format(json["positives"], json["total"])
        print "\t- More information on:\t{}".format(json["permalink"])
        return True

    def ip_analysis(self, ip):
        print "-> {}:".format(ip)
        url = 'https://www.virustotal.com/vtapi/v2/ip-address/report'
        parameters = {'ip': ip, 'apikey': self.api_key}
        json = self.send_req(url, parameters)

        if json == None or json["response_code"] == -1:
            return False
        if json["response_code"] == 0:
            print "\t/!\ IP address not in VirusTotal dataset."
            return False

        print "\t- country: " + json["country"]
        print "\t- owner: " + json["as_owner"]

        rslt_to_print = lambda x: """\033[1;32myes\033[1;m""" if x > 0 else """\033[1;31mno\033[1;m"""

        print "\t- Are malicious URLs hosted in this IP: ",
        print rslt_to_print(len(json["detected_urls"]))

        print "\t- Are known malware downloaded from this IP: ",
        print rslt_to_print(len(json["detected_downloaded_samples"]))

        print "\t- Some of those malware have been execute in VirusTotal sandboxed env: ",
        print rslt_to_print(len(json["detected_communicating_samples"]))

        print "\t- This IP has been found in another malware strings: ",
        print rslt_to_print(len(json["detected_referrer_samples"]))

        print "\t- More information on: https://www.virustotal.com/ip-address/{}/information/" \
                .format(ip)
        return True
