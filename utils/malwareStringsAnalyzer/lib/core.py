from lib.allRules.ipAddr import IpAddr
from lib.allRules.url import Url
from lib.allRules.cmd import Cmd
from lib.allRules.id import Id
from lib.allRules.path import Path
from lib.allRules.section import Section
from lib.allRules.symbol import Symbol
from lib.allRules.formatStr import FormatStr
from lib.allRules.message import Msg
from lib.allRules.undefined import Undefined

from lib.vt import Vt
from lib.parser import Parser
from lib.database import Database
from lib.rules import Rules

import os
import string
import sys

class Core(object):
    """
        class core
    """

    def __init__(self, malware_path, vt_key):
        self.malware_path = malware_path
        self.db = Database(malware_path)
        Rules.db = self.db
        self.string_list = None

        self.vt = Vt(vt_key, self.malware_path)

        self.ipAddr = IpAddr()
        self.url = Url()
        self.cmd = Cmd()
        self.id = Id()
        self.path = Path()
        self.section = Section()
        self.symbol = Symbol(self.malware_path)
        self.formatStr = FormatStr()
        self.msg = Msg()
        self.undef = Undefined()

        self.err_bad_path = "[Error] invalide malware file path."
        self.err_string_recovery = "[Error] string recovery failed."
        self.err_empty_bin = "[Error] no strings found."

    def load_strings(self):
        if not os.path.isfile(self.malware_path):
            print self.err_bad_path
            return False
        try:
            self.string_list = Parser.strings(self.malware_path)
        except:
            print self.err_string_recovery
            return False

        if self.string_list is None:
            print self.err_empty_bin
            return False

        return True

    def print_msa_logo(self):
        print """
___  ________  ___
|  \/  /  ___|/ _ \\
| .  . \ `--./ /_\ \\
| |\/| |`--. |  _  |
| |  | /\__/ | | | |
\_|  |_\____/\_| |_/

"""

    def run(self):
        """
            Entry point of the MSA functions.

            :param self: blabla
            :type self: object
            :return: If the function success or not.
            :rtype: Boolean
        """
        self.print_msa_logo()
        print "File information:"
        print "-----------------"
        print "-> path:\t\t" + self.malware_path \
                + "\n-> db table:\t\t" + self.db.malware_name
        print "-> Strings number:\t" + str(len(self.string_list)) + "\n"

        if self.vt.isActivate() == True:
            print "Virus total file analysis:"
            print "--------------------------"
            self.vt.file_analysis()

        isValid, error_msg = Parser.isValidBin(self.malware_path)
        if isValid == False:
            print error_msg
            sys.exit(2)

        print "\nStrings analysis:"
        print "-----------------"
        self.string_list = self.symbol.run_analysis(self.string_list)
        self.string_list = self.url.run_analysis(self.string_list)
        self.string_list = self.ipAddr.run_analysis(self.string_list)
        self.string_list = self.cmd.run_analysis(self.string_list)
        self.string_list = self.id.run_analysis(self.string_list)
        self.string_list = self.path.run_analysis(self.string_list)
        self.string_list = self.section.run_analysis(self.string_list)
        self.string_list = self.formatStr.run_analysis(self.string_list)
        self.string_list = self.string_list = self.msg.run_analysis(self.string_list)
        self.undef.run_analysis(self.string_list)

        print "\nVirus total URLs information:"
        print "-----------------------------"
        urls = list(set(self.db.getUrls()))
        for url in urls:
            self.vt.url_analysis(url)


        print "\nVirus total IP addresses information:"
        print "-------------------------------------"
        ips = list(set(self.db.getIpAddresses()))
        for ip in ips:
            self.vt.ip_analysis(ip)

        self.db.close()
        return True
