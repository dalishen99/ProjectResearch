from lib.rules import Rules
from lib.parser import Parser

class Id(Rules):
    """
        This class is used to extract identifiers (username/password) from
        malware binaries strings. It also inherit the Rules object used to
        gather all shared functions and variables.
    """

    def __init__(self):
        """
            Initialize type and info_msg attributes which respectively represent
            the type of extracted information (here identifiers - Id),
            and the message to display when the rule is initialized.
        """

        Rules.__init__(self)
        self.type = "id"
        self.info_msg = "-> Identifiers analysis "

    def run_analysis(self, string_list):
        """
            This method is used by the core to run analyze and extract strings
            matching with the "identifiers" type.

            :param string_list: All strings to analyse.
            :type string_list: List
            :return: A list of string without strings previously matched.
            :rtype: List
        """

        epur_string_list = []

        self.bar.init(string_list, self.info_msg + "is running")
        for string in string_list:
            id_found = Parser.getId(string)
            if id_found != None:
                self.db.createEntry(string, id_found, self.type)
            else:
                epur_string_list.append(string)
            self.bar.update()
        self.bar.close(self.info_msg + "is complete", True)
        return epur_string_list
