from lib.rules import Rules
from lib.parser import Parser
import subprocess

class Symbol(Rules):
    """
        This class is used to extract binaries elf symbols from malware
        binaries strings. It also inherit the Rules object used to gather
        all shared functions and variables.
    """

    def __init__(self, malware_path):
        """
            Initialize type and info_msg attributes which respectively represent
            the type of extracted information (here elf symbols - symbol),
            and the message to display when the rule is initialized.
            This class also contains a malware_path value containing the absolute
            path of the analyzed binary.

            :param malware_path: Absolute path of the analyzed binary.
            :type: string
        """

        Rules.__init__(self)
        self.type = "symbol"
        self.info_msg = "-> Symbols analysis "
        self.malware_path = malware_path

    def run_analysis(self, string_list):
        """
            This method is used by the core to run analyze and extract strings
            matching with the "elf symbols" type.

            :param string_list: All strings to analyse.
            :type string_list: List
            :return: A list of string without strings previously matched.
            :rtype: List
        """

        epur_string_list = []
        ret = subprocess.Popen(["readelf", "-s", self.malware_path],
                                stdout=subprocess.PIPE)
        readelf_output = ret.communicate()[0].split('\n')[3:]

        self.bar.init(string_list, self.info_msg + "is running")
        for string in string_list:
            sym_found, specific_type = Parser.getSymbol(string, readelf_output)
            if sym_found != None:
                self.db.createEntry(string, sym_found,
                                    self.type + "-" + specific_type)
            else:
                epur_string_list.append(string)
            self.bar.update()
        self.bar.close(self.info_msg + "is complete", True)
        return epur_string_list
