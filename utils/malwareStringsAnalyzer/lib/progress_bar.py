# -*- coding: utf-8 -*-
import time, sys

class ProgressBar(object):
    """
        This class is used to display a Progress bar to evaluate the progression
        of the string analysis.
    """

    def __init__(self):
        """
            Initialize all value needed to display the progress bar.
        """

        self.bar = None
        self.bar_size = 50
        self.max_val = 0
        self.cur_val = 0

    def __cur_percentage(self):
        """
            Compute the current percentage of string analysis progression.

            :return: Current percentage value.
            :rtype: int
        """
        return (self.cur_val * 100) / self.max_val

    def __cur_progression(self):
        """
            Build the display of current string analysis progression.

            :return: String representing the current progression.
            :rtype: string
        """
        prog = ""
        nb_prog = (self.__cur_percentage()) * self.bar_size / 100
        prog += "\033[1;47m \033[1;m" * nb_prog
        prog += " " * (self.bar_size - nb_prog)
        return prog

    def __display_bar(self):
        """
            Format and display the progression bar.
        """

        print "\r{}% |".format(self.__cur_percentage()) + self.__cur_progression() \
                + "|" + " ({}/{} strings)".format(self.cur_val, self.max_val),
        sys.stdout.flush()

    def init(self, iterable, init_str):
        """
            Initialize the progression bar.

            :param iterable: List of strings to analyze.
            :param init_str: String to display in the begin of the progression
                             bar.
            :type iterable: List
            :type init_str: string
        """
        print init_str + "\033[1;33m ● \033[1;m"
        self.max_val = len(iterable)
        self.__display_bar

    def update(self):
        """
            This method increment the progression bar by adding 1 percent.
        """
        self.cur_val += 1
        self.__display_bar()

    def close(self, str, endedCorrectly):
        """
            This method is called in the end of the progression bar to clean the
            display. It also display if the analysis have succeeded or not.
        """
        print "\033[F" + str,
        if endedCorrectly is True:
            print "\033[1;32m✓\033[1;m",
        else:
            print "\033[1;31m✗\033[1;m",
        print " " * 30 + "\n" + " " * 100 + "\r\033[F"
